datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Team {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  users        User[]
  bookings     Booking[]
  chatEngineId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  api_key      String?
  prop_key     String?
}

model CustomTask {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  taskTitle       String?
  guestFirstName  String
  guestName       String
  guestPhone      String
  location        String
  date            DateTime
  taskDescription String?
  status          String
  role            String
}

model Booking {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  bookId         String
  roomId         String
  firstNight     DateTime
  lastNight      DateTime
  numAdult       String
  numChild       String
  guestFirstName String
  guestName      String
  guestEmail     String
  guestPhone     String
  teamId         String   @db.ObjectId
  customNotes    String?
  status         String?  @default("To Arrive")
  team           Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  role               String    @default("admin")
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  accounts           Account[]
  chatEnginePassword String?
  sessions           Session[]
  teamId             String    @db.ObjectId
  team               Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  FCMpreferences     Boolean?  @default(false)
  FCMToken           String?   @unique
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
